// @generated by protoc-gen-es v1.0.0 with parameter "target=ts+js"
// @generated from file tenant/v1/tenant.proto (package tenant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * SubscriptionPlan is an enumeration over the various subscription plans.
 *
 * @generated from enum tenant.v1.SubscriptionPlan
 */
export const SubscriptionPlan = proto3.makeEnum(
  "tenant.v1.SubscriptionPlan",
  [
    {no: 0, name: "SUBSCRIPTION_PLAN_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "SUBSCRIPTION_PLAN_FREE", localName: "FREE"},
    {no: 2, name: "SUBSCRIPTION_PLAN_PRO", localName: "PRO"},
  ],
);

/**
 * @generated from enum tenant.v1.OAuthProvider
 */
export const OAuthProvider = proto3.makeEnum(
  "tenant.v1.OAuthProvider",
  [
    {no: 0, name: "O_AUTH_PROVIDER_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "O_AUTH_PROVIDER_GITHUB", localName: "GITHUB"},
  ],
);

/**
 * UsageRecordKind is an enumeration over various queryable usage records.
 *
 * @generated from enum tenant.v1.UsageRecordKind
 */
export const UsageRecordKind = proto3.makeEnum(
  "tenant.v1.UsageRecordKind",
  [
    {no: 0, name: "USAGE_RECORD_KIND_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "USAGE_RECORD_KIND_RAW_STORAGE_BYTES", localName: "RAW_STORAGE_BYTES"},
    {no: 2, name: "USAGE_RECORD_KIND_INDEX_STORAGE_BYTES", localName: "INDEX_STORAGE_BYTES"},
    {no: 3, name: "USAGE_RECORD_KIND_SEARCH_QUERIES", localName: "SEARCH_QUERIES"},
    {no: 4, name: "USAGE_RECORD_KIND_CONVERSE", localName: "CONVERSE"},
  ],
);

/**
 * AuthorizedUserRequest takes no parameters, as the authorization information
 * is passed in the request context (i.e. cookies or headers).
 *
 * @generated from message tenant.v1.AuthorizedUserRequest
 */
export const AuthorizedUserRequest = proto3.makeMessageType(
  "tenant.v1.AuthorizedUserRequest",
  [],
);

/**
 * AuthorizedUserResponse returns the user that's currently authorized.
 *
 * @generated from message tenant.v1.AuthorizedUserResponse
 */
export const AuthorizedUserResponse = proto3.makeMessageType(
  "tenant.v1.AuthorizedUserResponse",
  () => [
    { no: 1, name: "user", kind: "message", T: User },
  ],
);

/**
 * UserProfile is the users public profile.
 *
 * @generated from message tenant.v1.UserProfile
 */
export const UserProfile = proto3.makeMessageType(
  "tenant.v1.UserProfile",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * User is a user within the system.
 *
 * @generated from message tenant.v1.User
 */
export const User = proto3.makeMessageType(
  "tenant.v1.User",
  () => [
    { no: 1, name: "profile", kind: "message", T: UserProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "developer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "subscription_plan", kind: "enum", T: proto3.getEnumType(SubscriptionPlan) },
    { no: 5, name: "usage_addon", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * CreateAPIKeyRequest creates a new API key for the authorized user.
 *
 * @generated from message tenant.v1.CreateAPIKeyRequest
 */
export const CreateAPIKeyRequest = proto3.makeMessageType(
  "tenant.v1.CreateAPIKeyRequest",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * APIKey is an API key for a user.
 *
 * @generated from message tenant.v1.APIKey
 */
export const APIKey = proto3.makeMessageType(
  "tenant.v1.APIKey",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "full", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
    { no: 5, name: "partial", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
  ],
);

/**
 * CreateAPIKeyResponse returns the newly created API key.
 *
 * @generated from message tenant.v1.CreateAPIKeyResponse
 */
export const CreateAPIKeyResponse = proto3.makeMessageType(
  "tenant.v1.CreateAPIKeyResponse",
  () => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ],
);

/**
 * ListAPIKeysRequest lists the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysRequest
 */
export const ListAPIKeysRequest = proto3.makeMessageType(
  "tenant.v1.ListAPIKeysRequest",
  [],
);

/**
 * ListAPIKeysResponse returns the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysResponse
 */
export const ListAPIKeysResponse = proto3.makeMessageType(
  "tenant.v1.ListAPIKeysResponse",
  () => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ],
);

/**
 * DeleteAPIKeyRequest deletes an API key for the authorized user.
 *
 * @generated from message tenant.v1.DeleteAPIKeyRequest
 */
export const DeleteAPIKeyRequest = proto3.makeMessageType(
  "tenant.v1.DeleteAPIKeyRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeleteAPIKeyResponse acknowledges the deletion of an API key.
 *
 * @generated from message tenant.v1.DeleteAPIKeyResponse
 */
export const DeleteAPIKeyResponse = proto3.makeMessageType(
  "tenant.v1.DeleteAPIKeyResponse",
  [],
);

/**
 * UpdateUserRequest updates the user's profile.
 *
 * @generated from message tenant.v1.UpdateUserRequest
 */
export const UpdateUserRequest = proto3.makeMessageType(
  "tenant.v1.UpdateUserRequest",
  () => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "developer", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * UpdateUserResponse returns the updated user.
 *
 * @generated from message tenant.v1.UpdateUserResponse
 */
export const UpdateUserResponse = proto3.makeMessageType(
  "tenant.v1.UpdateUserResponse",
  () => [
    { no: 1, name: "user", kind: "message", T: User },
  ],
);

/**
 * OAuthLinkRequest allows users to make a number of links to external services.
 *
 * @generated from message tenant.v1.OAuthLinkRequest
 */
export const OAuthLinkRequest = proto3.makeMessageType(
  "tenant.v1.OAuthLinkRequest",
  () => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(OAuthProvider) },
    { no: 2, name: "redirect_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OAuthLink is a link to an external service.
 *
 * @generated from message tenant.v1.OAuthLink
 */
export const OAuthLink = proto3.makeMessageType(
  "tenant.v1.OAuthLink",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(OAuthProvider) },
    { no: 4, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * OAuthLinkResponse returns the current state of the link, or a setup URL.
 *
 * @generated from message tenant.v1.OAuthLinkResponse
 */
export const OAuthLinkResponse = proto3.makeMessageType(
  "tenant.v1.OAuthLinkResponse",
  () => [
    { no: 1, name: "setup_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "state", kind: "message", T: OAuthLink, oneof: "response" },
  ],
);

/**
 * UsageRequest queries the users usage statistics for the current period.
 *
 * @generated from message tenant.v1.UsageRequest
 */
export const UsageRequest = proto3.makeMessageType(
  "tenant.v1.UsageRequest",
  [],
);

/**
 * UsageResponse returns the users usage statistics for the current period.
 *
 * @generated from message tenant.v1.UsageResponse
 */
export const UsageResponse = proto3.makeMessageType(
  "tenant.v1.UsageResponse",
  () => [
    { no: 1, name: "records", kind: "message", T: UsageResponse_Record, repeated: true },
  ],
);

/**
 * @generated from message tenant.v1.UsageResponse.Record
 */
export const UsageResponse_Record = proto3.makeMessageType(
  "tenant.v1.UsageResponse.Record",
  () => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(UsageRecordKind) },
    { no: 2, name: "current_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "accumulated_cents", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
  {localName: "UsageResponse_Record"},
);

/**
 * UpdateSubscriptionRequest updates the user's subscription.
 * This request allows the caller to pass in the desired end-state of the users
 * subscription. The server will compute the necessary changes and return the required
 * actions in the response.
 *
 * @generated from message tenant.v1.UpdateSubscriptionRequest
 */
export const UpdateSubscriptionRequest = proto3.makeMessageType(
  "tenant.v1.UpdateSubscriptionRequest",
  () => [
    { no: 1, name: "plan", kind: "enum", T: proto3.getEnumType(SubscriptionPlan) },
    { no: 2, name: "usage_addon", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "force_billing_portal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "redirect_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * UpdateSubscriptionResponse returns the actions required to update the users
 * subscription to the desired end-state passed in the request.
 *
 * @generated from message tenant.v1.UpdateSubscriptionResponse
 */
export const UpdateSubscriptionResponse = proto3.makeMessageType(
  "tenant.v1.UpdateSubscriptionResponse",
  () => [
    { no: 1, name: "none", kind: "message", T: UpdateSubscriptionResponse_None, oneof: "action" },
    { no: 2, name: "checkout_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "action" },
    { no: 3, name: "billing_portal_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "action" },
  ],
);

/**
 * @generated from message tenant.v1.UpdateSubscriptionResponse.None
 */
export const UpdateSubscriptionResponse_None = proto3.makeMessageType(
  "tenant.v1.UpdateSubscriptionResponse.None",
  [],
  {localName: "UpdateSubscriptionResponse_None"},
);

/**
 * PhoneNumber is a phone number for a user.
 *
 * @generated from message tenant.v1.PhoneNumber
 */
export const PhoneNumber = proto3.makeMessageType(
  "tenant.v1.PhoneNumber",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * PhoneNumbersRequest lists the phone numbers for the authorized user.
 *
 * @generated from message tenant.v1.PhoneNumbersRequest
 */
export const PhoneNumbersRequest = proto3.makeMessageType(
  "tenant.v1.PhoneNumbersRequest",
  [],
);

/**
 * PhoneNumbersResponse returns the phone numbers for the authorized user.
 *
 * @generated from message tenant.v1.PhoneNumbersResponse
 */
export const PhoneNumbersResponse = proto3.makeMessageType(
  "tenant.v1.PhoneNumbersResponse",
  () => [
    { no: 1, name: "phone_numbers", kind: "message", T: PhoneNumber, repeated: true },
  ],
);

/**
 * VerifyPhoneNumberRequest verifies a phone number for the user.
 *
 * @generated from message tenant.v1.VerifyPhoneNumberRequest
 */
export const VerifyPhoneNumberRequest = proto3.makeMessageType(
  "tenant.v1.VerifyPhoneNumberRequest",
  () => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * VerifyPhoneNumberResponse returns the verification code that was sent to the user.
 *
 * @generated from message tenant.v1.VerifyPhoneNumberResponse
 */
export const VerifyPhoneNumberResponse = proto3.makeMessageType(
  "tenant.v1.VerifyPhoneNumberResponse",
  () => [
    { no: 1, name: "phone_number", kind: "message", T: PhoneNumber },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeletePhoneNumberRequest deletes a phone number for the authorized user.
 *
 * @generated from message tenant.v1.DeletePhoneNumberRequest
 */
export const DeletePhoneNumberRequest = proto3.makeMessageType(
  "tenant.v1.DeletePhoneNumberRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeletePhoneNumberResponse acknowledges the deletion of a phone number.
 *
 * @generated from message tenant.v1.DeletePhoneNumberResponse
 */
export const DeletePhoneNumberResponse = proto3.makeMessageType(
  "tenant.v1.DeletePhoneNumberResponse",
  [],
);

/**
 * EmailAliasesRequest lists the email aliases for the authorized user.
 *
 * @generated from message tenant.v1.EmailAliasesRequest
 */
export const EmailAliasesRequest = proto3.makeMessageType(
  "tenant.v1.EmailAliasesRequest",
  [],
);

/**
 * EmailAlias is an email alias for a user.
 *
 * @generated from message tenant.v1.EmailAlias
 */
export const EmailAlias = proto3.makeMessageType(
  "tenant.v1.EmailAlias",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * EmailAliasesResponse returns the email aliases for the authorized user.
 *
 * @generated from message tenant.v1.EmailAliasesResponse
 */
export const EmailAliasesResponse = proto3.makeMessageType(
  "tenant.v1.EmailAliasesResponse",
  () => [
    { no: 1, name: "email_aliases", kind: "message", T: EmailAlias, repeated: true },
  ],
);

/**
 * VerifyEmailAliasRequest verifies an email alias for the user.
 *
 * @generated from message tenant.v1.VerifyEmailAliasRequest
 */
export const VerifyEmailAliasRequest = proto3.makeMessageType(
  "tenant.v1.VerifyEmailAliasRequest",
  () => [
    { no: 1, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * VerifyEmailAliasResponse returns the created email alias object.
 *
 * @generated from message tenant.v1.VerifyEmailAliasResponse
 */
export const VerifyEmailAliasResponse = proto3.makeMessageType(
  "tenant.v1.VerifyEmailAliasResponse",
  () => [
    { no: 1, name: "email_alias", kind: "message", T: EmailAlias },
  ],
);

/**
 * DeleteEmailAliasRequest deletes an email alias for the authorized user.
 *
 * @generated from message tenant.v1.DeleteEmailAliasRequest
 */
export const DeleteEmailAliasRequest = proto3.makeMessageType(
  "tenant.v1.DeleteEmailAliasRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeleteEmailAliasResponse acknowledges the deletion of an email alias.
 *
 * @generated from message tenant.v1.DeleteEmailAliasResponse
 */
export const DeleteEmailAliasResponse = proto3.makeMessageType(
  "tenant.v1.DeleteEmailAliasResponse",
  [],
);

