// @generated by protoc-gen-es v1.0.0 with parameter "target=ts+js"
// @generated from file tenant/v1/tenant.proto (package tenant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * AuthorizedUserRequest takes no parameters, as the authorization information
 * is passed in the request context (i.e. cookies or headers).
 *
 * @generated from message tenant.v1.AuthorizedUserRequest
 */
export const AuthorizedUserRequest = proto3.makeMessageType(
  "tenant.v1.AuthorizedUserRequest",
  [],
);

/**
 * AuthorizedUserResponse returns the user that's currently authorized.
 *
 * @generated from message tenant.v1.AuthorizedUserResponse
 */
export const AuthorizedUserResponse = proto3.makeMessageType(
  "tenant.v1.AuthorizedUserResponse",
  () => [
    { no: 1, name: "user", kind: "message", T: User },
  ],
);

/**
 * UserProfile is the users public profile.
 *
 * @generated from message tenant.v1.UserProfile
 */
export const UserProfile = proto3.makeMessageType(
  "tenant.v1.UserProfile",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * User is a user within the system.
 *
 * @generated from message tenant.v1.User
 */
export const User = proto3.makeMessageType(
  "tenant.v1.User",
  () => [
    { no: 1, name: "profile", kind: "message", T: UserProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ],
);

/**
 * CreateAPIKeyRequest creates a new API key for the authorized user.
 *
 * @generated from message tenant.v1.CreateAPIKeyRequest
 */
export const CreateAPIKeyRequest = proto3.makeMessageType(
  "tenant.v1.CreateAPIKeyRequest",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * APIKey is an API key for a user.
 *
 * @generated from message tenant.v1.APIKey
 */
export const APIKey = proto3.makeMessageType(
  "tenant.v1.APIKey",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "full", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
    { no: 5, name: "partial", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
  ],
);

/**
 * CreateAPIKeyResponse returns the newly created API key.
 *
 * @generated from message tenant.v1.CreateAPIKeyResponse
 */
export const CreateAPIKeyResponse = proto3.makeMessageType(
  "tenant.v1.CreateAPIKeyResponse",
  () => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ],
);

/**
 * ListAPIKeysRequest lists the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysRequest
 */
export const ListAPIKeysRequest = proto3.makeMessageType(
  "tenant.v1.ListAPIKeysRequest",
  [],
);

/**
 * ListAPIKeysResponse returns the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysResponse
 */
export const ListAPIKeysResponse = proto3.makeMessageType(
  "tenant.v1.ListAPIKeysResponse",
  () => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ],
);

/**
 * DeleteAPIKeyRequest deletes an API key for the authorized user.
 *
 * @generated from message tenant.v1.DeleteAPIKeyRequest
 */
export const DeleteAPIKeyRequest = proto3.makeMessageType(
  "tenant.v1.DeleteAPIKeyRequest",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * DeleteAPIKeyResponse acknowledges the deletion of an API key.
 *
 * @generated from message tenant.v1.DeleteAPIKeyResponse
 */
export const DeleteAPIKeyResponse = proto3.makeMessageType(
  "tenant.v1.DeleteAPIKeyResponse",
  [],
);

/**
 * GroupProfile is the groups public profile.
 *
 * @generated from message tenant.v1.GroupProfile
 */
export const GroupProfile = proto3.makeMessageType(
  "tenant.v1.GroupProfile",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Group is a group within the system.
 *
 * @generated from message tenant.v1.Group
 */
export const Group = proto3.makeMessageType(
  "tenant.v1.Group",
  () => [
    { no: 1, name: "profile", kind: "message", T: GroupProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ],
);

