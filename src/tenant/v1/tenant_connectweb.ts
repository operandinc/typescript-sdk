// @generated by protoc-gen-connect-web v0.7.0 with parameter "target=ts"
// @generated from file tenant/v1/tenant.proto (package tenant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AuthorizedUserRequest, AuthorizedUserResponse, CreateAPIKeyRequest, CreateAPIKeyResponse, DeleteAPIKeyRequest, DeleteAPIKeyResponse, ListAPIKeysRequest, ListAPIKeysResponse, OAuthLinkRequest, OAuthLinkResponse, UpdateSubscriptionRequest, UpdateSubscriptionResponse, UpdateUserRequest, UpdateUserResponse, UsageRequest, UsageResponse } from "./tenant_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * TenantService manages the tenants of the system, i.e. users and groups.
 *
 * @generated from service tenant.v1.TenantService
 */
export const TenantService = {
  typeName: "tenant.v1.TenantService",
  methods: {
    /**
     * AuthorizedUser returns the user that's currently authorized.
     * This can be used to check if the user is logged in.
     *
     * @generated from rpc tenant.v1.TenantService.AuthorizedUser
     */
    authorizedUser: {
      name: "AuthorizedUser",
      I: AuthorizedUserRequest,
      O: AuthorizedUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreateAPIKey creates a new API key for the authorized user.
     *
     * @generated from rpc tenant.v1.TenantService.CreateAPIKey
     */
    createAPIKey: {
      name: "CreateAPIKey",
      I: CreateAPIKeyRequest,
      O: CreateAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListAPIKeys lists the API keys for the authorized user.
     *
     * @generated from rpc tenant.v1.TenantService.ListAPIKeys
     */
    listAPIKeys: {
      name: "ListAPIKeys",
      I: ListAPIKeysRequest,
      O: ListAPIKeysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteAPIKey deletes an API key for the authorized user.
     *
     * @generated from rpc tenant.v1.TenantService.DeleteAPIKey
     */
    deleteAPIKey: {
      name: "DeleteAPIKey",
      I: DeleteAPIKeyRequest,
      O: DeleteAPIKeyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * OAuthLink allows users to make a number of links to external services.
     * For any given provider, this endpoint may return a setup URL that the
     * user can visit to authorize the service, or an object describing the
     * current state of the link.
     *
     * @generated from rpc tenant.v1.TenantService.OAuthLink
     */
    oAuthLink: {
      name: "OAuthLink",
      I: OAuthLinkRequest,
      O: OAuthLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateUser updates the user's profile.
     *
     * @generated from rpc tenant.v1.TenantService.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: UpdateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Usage queries the users usage statistics for the current period.
     *
     * @generated from rpc tenant.v1.TenantService.Usage
     */
    usage: {
      name: "Usage",
      I: UsageRequest,
      O: UsageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateSubscription updates the user's subscription.
     *
     * @generated from rpc tenant.v1.TenantService.UpdateSubscription
     */
    updateSubscription: {
      name: "UpdateSubscription",
      I: UpdateSubscriptionRequest,
      O: UpdateSubscriptionResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

