// @generated by protoc-gen-es v1.0.0 with parameter "target=ts+js"
// @generated from file tenant/v1/tenant.proto (package tenant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * AuthorizedUserRequest takes no parameters, as the authorization information
 * is passed in the request context (i.e. cookies or headers).
 *
 * @generated from message tenant.v1.AuthorizedUserRequest
 */
export class AuthorizedUserRequest extends Message<AuthorizedUserRequest> {
  constructor(data?: PartialMessage<AuthorizedUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.AuthorizedUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedUserRequest | PlainMessage<AuthorizedUserRequest> | undefined, b: AuthorizedUserRequest | PlainMessage<AuthorizedUserRequest> | undefined): boolean {
    return proto3.util.equals(AuthorizedUserRequest, a, b);
  }
}

/**
 * AuthorizedUserResponse returns the user that's currently authorized.
 *
 * @generated from message tenant.v1.AuthorizedUserResponse
 */
export class AuthorizedUserResponse extends Message<AuthorizedUserResponse> {
  /**
   * @generated from field: tenant.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<AuthorizedUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.AuthorizedUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedUserResponse | PlainMessage<AuthorizedUserResponse> | undefined, b: AuthorizedUserResponse | PlainMessage<AuthorizedUserResponse> | undefined): boolean {
    return proto3.util.equals(AuthorizedUserResponse, a, b);
  }
}

/**
 * UserProfile is the users public profile.
 *
 * @generated from message tenant.v1.UserProfile
 */
export class UserProfile extends Message<UserProfile> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email_address = 2;
   */
  emailAddress = "";

  /**
   * @generated from field: optional string first_name = 3;
   */
  firstName?: string;

  /**
   * @generated from field: optional string last_name = 4;
   */
  lastName?: string;

  constructor(data?: PartialMessage<UserProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UserProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfile {
    return new UserProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfile | PlainMessage<UserProfile> | undefined, b: UserProfile | PlainMessage<UserProfile> | undefined): boolean {
    return proto3.util.equals(UserProfile, a, b);
  }
}

/**
 * User is a user within the system.
 *
 * @generated from message tenant.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: tenant.v1.UserProfile profile = 1;
   */
  profile?: UserProfile;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: UserProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * CreateAPIKeyRequest creates a new API key for the authorized user.
 *
 * @generated from message tenant.v1.CreateAPIKeyRequest
 */
export class CreateAPIKeyRequest extends Message<CreateAPIKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.CreateAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined, b: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyRequest, a, b);
  }
}

/**
 * APIKey is an API key for a user.
 *
 * @generated from message tenant.v1.APIKey
 */
export class APIKey extends Message<APIKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from oneof tenant.v1.APIKey.token
   */
  token: {
    /**
     * @generated from field: string full = 4;
     */
    value: string;
    case: "full";
  } | {
    /**
     * @generated from field: string partial = 5;
     */
    value: string;
    case: "partial";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<APIKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.APIKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "full", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
    { no: 5, name: "partial", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIKey {
    return new APIKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJsonString(jsonString, options);
  }

  static equals(a: APIKey | PlainMessage<APIKey> | undefined, b: APIKey | PlainMessage<APIKey> | undefined): boolean {
    return proto3.util.equals(APIKey, a, b);
  }
}

/**
 * CreateAPIKeyResponse returns the newly created API key.
 *
 * @generated from message tenant.v1.CreateAPIKeyResponse
 */
export class CreateAPIKeyResponse extends Message<CreateAPIKeyResponse> {
  /**
   * @generated from field: tenant.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<CreateAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.CreateAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined, b: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyResponse, a, b);
  }
}

/**
 * ListAPIKeysRequest lists the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysRequest
 */
export class ListAPIKeysRequest extends Message<ListAPIKeysRequest> {
  constructor(data?: PartialMessage<ListAPIKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.ListAPIKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAPIKeysRequest | PlainMessage<ListAPIKeysRequest> | undefined, b: ListAPIKeysRequest | PlainMessage<ListAPIKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListAPIKeysRequest, a, b);
  }
}

/**
 * ListAPIKeysResponse returns the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysResponse
 */
export class ListAPIKeysResponse extends Message<ListAPIKeysResponse> {
  /**
   * @generated from field: repeated tenant.v1.APIKey keys = 1;
   */
  keys: APIKey[] = [];

  constructor(data?: PartialMessage<ListAPIKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.ListAPIKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined, b: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListAPIKeysResponse, a, b);
  }
}

/**
 * DeleteAPIKeyRequest deletes an API key for the authorized user.
 *
 * @generated from message tenant.v1.DeleteAPIKeyRequest
 */
export class DeleteAPIKeyRequest extends Message<DeleteAPIKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeleteAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined, b: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyRequest, a, b);
  }
}

/**
 * DeleteAPIKeyResponse acknowledges the deletion of an API key.
 *
 * @generated from message tenant.v1.DeleteAPIKeyResponse
 */
export class DeleteAPIKeyResponse extends Message<DeleteAPIKeyResponse> {
  constructor(data?: PartialMessage<DeleteAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeleteAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined, b: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyResponse, a, b);
  }
}

/**
 * GroupProfile is the groups public profile.
 *
 * @generated from message tenant.v1.GroupProfile
 */
export class GroupProfile extends Message<GroupProfile> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GroupProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.GroupProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupProfile {
    return new GroupProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupProfile {
    return new GroupProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupProfile {
    return new GroupProfile().fromJsonString(jsonString, options);
  }

  static equals(a: GroupProfile | PlainMessage<GroupProfile> | undefined, b: GroupProfile | PlainMessage<GroupProfile> | undefined): boolean {
    return proto3.util.equals(GroupProfile, a, b);
  }
}

/**
 * Group is a group within the system.
 *
 * @generated from message tenant.v1.Group
 */
export class Group extends Message<Group> {
  /**
   * @generated from field: tenant.v1.GroupProfile profile = 1;
   */
  profile?: GroupProfile;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: GroupProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {
    return new Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJsonString(jsonString, options);
  }

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {
    return proto3.util.equals(Group, a, b);
  }
}

