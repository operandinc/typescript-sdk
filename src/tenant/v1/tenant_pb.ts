// @generated by protoc-gen-es v1.0.0 with parameter "target=ts+js"
// @generated from file tenant/v1/tenant.proto (package tenant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * SubscriptionPlan is an enumeration over the various subscription plans.
 *
 * @generated from enum tenant.v1.SubscriptionPlan
 */
export enum SubscriptionPlan {
  /**
   * @generated from enum value: SUBSCRIPTION_PLAN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUBSCRIPTION_PLAN_FREE = 1;
   */
  FREE = 1,

  /**
   * @generated from enum value: SUBSCRIPTION_PLAN_PRO = 2;
   */
  PRO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SubscriptionPlan)
proto3.util.setEnumType(SubscriptionPlan, "tenant.v1.SubscriptionPlan", [
  { no: 0, name: "SUBSCRIPTION_PLAN_UNSPECIFIED" },
  { no: 1, name: "SUBSCRIPTION_PLAN_FREE" },
  { no: 2, name: "SUBSCRIPTION_PLAN_PRO" },
]);

/**
 * @generated from enum tenant.v1.OAuthProvider
 */
export enum OAuthProvider {
  /**
   * @generated from enum value: O_AUTH_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: O_AUTH_PROVIDER_GITHUB = 1;
   */
  GITHUB = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(OAuthProvider)
proto3.util.setEnumType(OAuthProvider, "tenant.v1.OAuthProvider", [
  { no: 0, name: "O_AUTH_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "O_AUTH_PROVIDER_GITHUB" },
]);

/**
 * UsageRecordKind is an enumeration over various queryable usage records.
 *
 * @generated from enum tenant.v1.UsageRecordKind
 */
export enum UsageRecordKind {
  /**
   * @generated from enum value: USAGE_RECORD_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USAGE_RECORD_KIND_RAW_STORAGE_BYTES = 1;
   */
  RAW_STORAGE_BYTES = 1,

  /**
   * @generated from enum value: USAGE_RECORD_KIND_INDEX_STORAGE_BYTES = 2;
   */
  INDEX_STORAGE_BYTES = 2,

  /**
   * @generated from enum value: USAGE_RECORD_KIND_SEARCH_QUERIES = 3;
   */
  SEARCH_QUERIES = 3,

  /**
   * @generated from enum value: USAGE_RECORD_KIND_CONVERSE = 4;
   */
  CONVERSE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(UsageRecordKind)
proto3.util.setEnumType(UsageRecordKind, "tenant.v1.UsageRecordKind", [
  { no: 0, name: "USAGE_RECORD_KIND_UNSPECIFIED" },
  { no: 1, name: "USAGE_RECORD_KIND_RAW_STORAGE_BYTES" },
  { no: 2, name: "USAGE_RECORD_KIND_INDEX_STORAGE_BYTES" },
  { no: 3, name: "USAGE_RECORD_KIND_SEARCH_QUERIES" },
  { no: 4, name: "USAGE_RECORD_KIND_CONVERSE" },
]);

/**
 * AuthorizedUserRequest takes no parameters, as the authorization information
 * is passed in the request context (i.e. cookies or headers).
 *
 * @generated from message tenant.v1.AuthorizedUserRequest
 */
export class AuthorizedUserRequest extends Message<AuthorizedUserRequest> {
  constructor(data?: PartialMessage<AuthorizedUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.AuthorizedUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedUserRequest {
    return new AuthorizedUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedUserRequest | PlainMessage<AuthorizedUserRequest> | undefined, b: AuthorizedUserRequest | PlainMessage<AuthorizedUserRequest> | undefined): boolean {
    return proto3.util.equals(AuthorizedUserRequest, a, b);
  }
}

/**
 * AuthorizedUserResponse returns the user that's currently authorized.
 *
 * @generated from message tenant.v1.AuthorizedUserResponse
 */
export class AuthorizedUserResponse extends Message<AuthorizedUserResponse> {
  /**
   * @generated from field: tenant.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<AuthorizedUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.AuthorizedUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthorizedUserResponse {
    return new AuthorizedUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthorizedUserResponse | PlainMessage<AuthorizedUserResponse> | undefined, b: AuthorizedUserResponse | PlainMessage<AuthorizedUserResponse> | undefined): boolean {
    return proto3.util.equals(AuthorizedUserResponse, a, b);
  }
}

/**
 * UserProfile is the users public profile.
 *
 * @generated from message tenant.v1.UserProfile
 */
export class UserProfile extends Message<UserProfile> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email_address = 2;
   */
  emailAddress = "";

  /**
   * @generated from field: optional string first_name = 3;
   */
  firstName?: string;

  /**
   * @generated from field: optional string last_name = 4;
   */
  lastName?: string;

  constructor(data?: PartialMessage<UserProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UserProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserProfile {
    return new UserProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserProfile {
    return new UserProfile().fromJsonString(jsonString, options);
  }

  static equals(a: UserProfile | PlainMessage<UserProfile> | undefined, b: UserProfile | PlainMessage<UserProfile> | undefined): boolean {
    return proto3.util.equals(UserProfile, a, b);
  }
}

/**
 * User is a user within the system.
 *
 * @generated from message tenant.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: tenant.v1.UserProfile profile = 1;
   */
  profile?: UserProfile;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: bool developer = 3;
   */
  developer = false;

  /**
   * @generated from field: tenant.v1.SubscriptionPlan subscription_plan = 4;
   */
  subscriptionPlan = SubscriptionPlan.UNSPECIFIED;

  /**
   * @generated from field: bool usage_addon = 5;
   */
  usageAddon = false;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: UserProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "developer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "subscription_plan", kind: "enum", T: proto3.getEnumType(SubscriptionPlan) },
    { no: 5, name: "usage_addon", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * CreateAPIKeyRequest creates a new API key for the authorized user.
 *
 * @generated from message tenant.v1.CreateAPIKeyRequest
 */
export class CreateAPIKeyRequest extends Message<CreateAPIKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.CreateAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined, b: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyRequest, a, b);
  }
}

/**
 * APIKey is an API key for a user.
 *
 * @generated from message tenant.v1.APIKey
 */
export class APIKey extends Message<APIKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from oneof tenant.v1.APIKey.token
   */
  token: {
    /**
     * @generated from field: string full = 4;
     */
    value: string;
    case: "full";
  } | {
    /**
     * @generated from field: string partial = 5;
     */
    value: string;
    case: "partial";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<APIKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.APIKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "full", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
    { no: 5, name: "partial", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "token" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIKey {
    return new APIKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJsonString(jsonString, options);
  }

  static equals(a: APIKey | PlainMessage<APIKey> | undefined, b: APIKey | PlainMessage<APIKey> | undefined): boolean {
    return proto3.util.equals(APIKey, a, b);
  }
}

/**
 * CreateAPIKeyResponse returns the newly created API key.
 *
 * @generated from message tenant.v1.CreateAPIKeyResponse
 */
export class CreateAPIKeyResponse extends Message<CreateAPIKeyResponse> {
  /**
   * @generated from field: tenant.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<CreateAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.CreateAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined, b: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyResponse, a, b);
  }
}

/**
 * ListAPIKeysRequest lists the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysRequest
 */
export class ListAPIKeysRequest extends Message<ListAPIKeysRequest> {
  constructor(data?: PartialMessage<ListAPIKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.ListAPIKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAPIKeysRequest {
    return new ListAPIKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAPIKeysRequest | PlainMessage<ListAPIKeysRequest> | undefined, b: ListAPIKeysRequest | PlainMessage<ListAPIKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListAPIKeysRequest, a, b);
  }
}

/**
 * ListAPIKeysResponse returns the API keys for the authorized user.
 *
 * @generated from message tenant.v1.ListAPIKeysResponse
 */
export class ListAPIKeysResponse extends Message<ListAPIKeysResponse> {
  /**
   * @generated from field: repeated tenant.v1.APIKey keys = 1;
   */
  keys: APIKey[] = [];

  constructor(data?: PartialMessage<ListAPIKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.ListAPIKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined, b: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListAPIKeysResponse, a, b);
  }
}

/**
 * DeleteAPIKeyRequest deletes an API key for the authorized user.
 *
 * @generated from message tenant.v1.DeleteAPIKeyRequest
 */
export class DeleteAPIKeyRequest extends Message<DeleteAPIKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeleteAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined, b: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyRequest, a, b);
  }
}

/**
 * DeleteAPIKeyResponse acknowledges the deletion of an API key.
 *
 * @generated from message tenant.v1.DeleteAPIKeyResponse
 */
export class DeleteAPIKeyResponse extends Message<DeleteAPIKeyResponse> {
  constructor(data?: PartialMessage<DeleteAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeleteAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyResponse {
    return new DeleteAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined, b: DeleteAPIKeyResponse | PlainMessage<DeleteAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyResponse, a, b);
  }
}

/**
 * UpdateUserRequest updates the user's profile.
 *
 * @generated from message tenant.v1.UpdateUserRequest
 */
export class UpdateUserRequest extends Message<UpdateUserRequest> {
  /**
   * @generated from field: optional string first_name = 1;
   */
  firstName?: string;

  /**
   * @generated from field: optional string last_name = 2;
   */
  lastName?: string;

  /**
   * @generated from field: optional bool developer = 3;
   */
  developer?: boolean;

  constructor(data?: PartialMessage<UpdateUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UpdateUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "developer", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserRequest {
    return new UpdateUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined, b: UpdateUserRequest | PlainMessage<UpdateUserRequest> | undefined): boolean {
    return proto3.util.equals(UpdateUserRequest, a, b);
  }
}

/**
 * UpdateUserResponse returns the updated user.
 *
 * @generated from message tenant.v1.UpdateUserResponse
 */
export class UpdateUserResponse extends Message<UpdateUserResponse> {
  /**
   * @generated from field: tenant.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<UpdateUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UpdateUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateUserResponse {
    return new UpdateUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined, b: UpdateUserResponse | PlainMessage<UpdateUserResponse> | undefined): boolean {
    return proto3.util.equals(UpdateUserResponse, a, b);
  }
}

/**
 * GroupProfile is the groups public profile.
 *
 * @generated from message tenant.v1.GroupProfile
 */
export class GroupProfile extends Message<GroupProfile> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GroupProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.GroupProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupProfile {
    return new GroupProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupProfile {
    return new GroupProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupProfile {
    return new GroupProfile().fromJsonString(jsonString, options);
  }

  static equals(a: GroupProfile | PlainMessage<GroupProfile> | undefined, b: GroupProfile | PlainMessage<GroupProfile> | undefined): boolean {
    return proto3.util.equals(GroupProfile, a, b);
  }
}

/**
 * Group is a group within the system.
 *
 * @generated from message tenant.v1.Group
 */
export class Group extends Message<Group> {
  /**
   * @generated from field: tenant.v1.GroupProfile profile = 1;
   */
  profile?: GroupProfile;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: GroupProfile },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group {
    return new Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group {
    return new Group().fromJsonString(jsonString, options);
  }

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean {
    return proto3.util.equals(Group, a, b);
  }
}

/**
 * OAuthLinkRequest allows users to make a number of links to external services.
 *
 * @generated from message tenant.v1.OAuthLinkRequest
 */
export class OAuthLinkRequest extends Message<OAuthLinkRequest> {
  /**
   * @generated from field: tenant.v1.OAuthProvider provider = 1;
   */
  provider = OAuthProvider.UNSPECIFIED;

  /**
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl = "";

  constructor(data?: PartialMessage<OAuthLinkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.OAuthLinkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "enum", T: proto3.getEnumType(OAuthProvider) },
    { no: 2, name: "redirect_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthLinkRequest {
    return new OAuthLinkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthLinkRequest {
    return new OAuthLinkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthLinkRequest {
    return new OAuthLinkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthLinkRequest | PlainMessage<OAuthLinkRequest> | undefined, b: OAuthLinkRequest | PlainMessage<OAuthLinkRequest> | undefined): boolean {
    return proto3.util.equals(OAuthLinkRequest, a, b);
  }
}

/**
 * OAuthLink is a link to an external service.
 *
 * @generated from message tenant.v1.OAuthLink
 */
export class OAuthLink extends Message<OAuthLink> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: tenant.v1.OAuthProvider provider = 3;
   */
  provider = OAuthProvider.UNSPECIFIED;

  /**
   * @generated from field: string access_token = 4;
   */
  accessToken = "";

  constructor(data?: PartialMessage<OAuthLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.OAuthLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(OAuthProvider) },
    { no: 4, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthLink {
    return new OAuthLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthLink {
    return new OAuthLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthLink {
    return new OAuthLink().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthLink | PlainMessage<OAuthLink> | undefined, b: OAuthLink | PlainMessage<OAuthLink> | undefined): boolean {
    return proto3.util.equals(OAuthLink, a, b);
  }
}

/**
 * OAuthLinkResponse returns the current state of the link, or a setup URL.
 *
 * @generated from message tenant.v1.OAuthLinkResponse
 */
export class OAuthLinkResponse extends Message<OAuthLinkResponse> {
  /**
   * @generated from oneof tenant.v1.OAuthLinkResponse.response
   */
  response: {
    /**
     * @generated from field: string setup_url = 1;
     */
    value: string;
    case: "setupUrl";
  } | {
    /**
     * @generated from field: tenant.v1.OAuthLink state = 2;
     */
    value: OAuthLink;
    case: "state";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<OAuthLinkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.OAuthLinkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "setup_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "response" },
    { no: 2, name: "state", kind: "message", T: OAuthLink, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthLinkResponse {
    return new OAuthLinkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthLinkResponse {
    return new OAuthLinkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthLinkResponse {
    return new OAuthLinkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthLinkResponse | PlainMessage<OAuthLinkResponse> | undefined, b: OAuthLinkResponse | PlainMessage<OAuthLinkResponse> | undefined): boolean {
    return proto3.util.equals(OAuthLinkResponse, a, b);
  }
}

/**
 * UsageRequest queries the users usage statistics for the current period.
 *
 * @generated from message tenant.v1.UsageRequest
 */
export class UsageRequest extends Message<UsageRequest> {
  constructor(data?: PartialMessage<UsageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UsageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageRequest {
    return new UsageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageRequest {
    return new UsageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageRequest {
    return new UsageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UsageRequest | PlainMessage<UsageRequest> | undefined, b: UsageRequest | PlainMessage<UsageRequest> | undefined): boolean {
    return proto3.util.equals(UsageRequest, a, b);
  }
}

/**
 * UsageResponse returns the users usage statistics for the current period.
 *
 * @generated from message tenant.v1.UsageResponse
 */
export class UsageResponse extends Message<UsageResponse> {
  /**
   * @generated from field: repeated tenant.v1.UsageResponse.Record records = 1;
   */
  records: UsageResponse_Record[] = [];

  constructor(data?: PartialMessage<UsageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UsageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "message", T: UsageResponse_Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageResponse {
    return new UsageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageResponse {
    return new UsageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageResponse {
    return new UsageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UsageResponse | PlainMessage<UsageResponse> | undefined, b: UsageResponse | PlainMessage<UsageResponse> | undefined): boolean {
    return proto3.util.equals(UsageResponse, a, b);
  }
}

/**
 * @generated from message tenant.v1.UsageResponse.Record
 */
export class UsageResponse_Record extends Message<UsageResponse_Record> {
  /**
   * @generated from field: tenant.v1.UsageRecordKind kind = 1;
   */
  kind = UsageRecordKind.UNSPECIFIED;

  /**
   * @generated from field: int64 current_value = 2;
   */
  currentValue = protoInt64.zero;

  /**
   * @generated from field: int64 accumulated_cents = 3;
   */
  accumulatedCents = protoInt64.zero;

  constructor(data?: PartialMessage<UsageResponse_Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UsageResponse.Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(UsageRecordKind) },
    { no: 2, name: "current_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "accumulated_cents", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageResponse_Record {
    return new UsageResponse_Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageResponse_Record {
    return new UsageResponse_Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageResponse_Record {
    return new UsageResponse_Record().fromJsonString(jsonString, options);
  }

  static equals(a: UsageResponse_Record | PlainMessage<UsageResponse_Record> | undefined, b: UsageResponse_Record | PlainMessage<UsageResponse_Record> | undefined): boolean {
    return proto3.util.equals(UsageResponse_Record, a, b);
  }
}

/**
 * UpdateSubscriptionRequest updates the user's subscription.
 * This request allows the caller to pass in the desired end-state of the users
 * subscription. The server will compute the necessary changes and return the required
 * actions in the response.
 *
 * @generated from message tenant.v1.UpdateSubscriptionRequest
 */
export class UpdateSubscriptionRequest extends Message<UpdateSubscriptionRequest> {
  /**
   * @generated from field: tenant.v1.SubscriptionPlan plan = 1;
   */
  plan = SubscriptionPlan.UNSPECIFIED;

  /**
   * @generated from field: bool usage_addon = 2;
   */
  usageAddon = false;

  /**
   * Force the billing portal to be used, even if we could update the subscription
   * ourselves (i.e. by cancelling it). This is useful when users want to access the
   * billing portal directly, i.e. to update their card details.
   *
   * @generated from field: optional bool force_billing_portal = 3;
   */
  forceBillingPortal?: boolean;

  /**
   * The URL to redirect the user once they return to the site after taking some action
   * on Stripe. If not specified, will default to https://operand.ai.
   *
   * @generated from field: optional string redirect_url = 4;
   */
  redirectUrl?: string;

  constructor(data?: PartialMessage<UpdateSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UpdateSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plan", kind: "enum", T: proto3.getEnumType(SubscriptionPlan) },
    { no: 2, name: "usage_addon", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "force_billing_portal", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "redirect_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubscriptionRequest {
    return new UpdateSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubscriptionRequest {
    return new UpdateSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubscriptionRequest {
    return new UpdateSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSubscriptionRequest | PlainMessage<UpdateSubscriptionRequest> | undefined, b: UpdateSubscriptionRequest | PlainMessage<UpdateSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSubscriptionRequest, a, b);
  }
}

/**
 * UpdateSubscriptionResponse returns the actions required to update the users
 * subscription to the desired end-state passed in the request.
 *
 * @generated from message tenant.v1.UpdateSubscriptionResponse
 */
export class UpdateSubscriptionResponse extends Message<UpdateSubscriptionResponse> {
  /**
   * @generated from oneof tenant.v1.UpdateSubscriptionResponse.action
   */
  action: {
    /**
     * @generated from field: tenant.v1.UpdateSubscriptionResponse.None none = 1;
     */
    value: UpdateSubscriptionResponse_None;
    case: "none";
  } | {
    /**
     * @generated from field: string checkout_url = 2;
     */
    value: string;
    case: "checkoutUrl";
  } | {
    /**
     * @generated from field: string billing_portal_url = 3;
     */
    value: string;
    case: "billingPortalUrl";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UpdateSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UpdateSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: UpdateSubscriptionResponse_None, oneof: "action" },
    { no: 2, name: "checkout_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "action" },
    { no: 3, name: "billing_portal_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubscriptionResponse {
    return new UpdateSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubscriptionResponse {
    return new UpdateSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubscriptionResponse {
    return new UpdateSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSubscriptionResponse | PlainMessage<UpdateSubscriptionResponse> | undefined, b: UpdateSubscriptionResponse | PlainMessage<UpdateSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message tenant.v1.UpdateSubscriptionResponse.None
 */
export class UpdateSubscriptionResponse_None extends Message<UpdateSubscriptionResponse_None> {
  constructor(data?: PartialMessage<UpdateSubscriptionResponse_None>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.UpdateSubscriptionResponse.None";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubscriptionResponse_None {
    return new UpdateSubscriptionResponse_None().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubscriptionResponse_None {
    return new UpdateSubscriptionResponse_None().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubscriptionResponse_None {
    return new UpdateSubscriptionResponse_None().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSubscriptionResponse_None | PlainMessage<UpdateSubscriptionResponse_None> | undefined, b: UpdateSubscriptionResponse_None | PlainMessage<UpdateSubscriptionResponse_None> | undefined): boolean {
    return proto3.util.equals(UpdateSubscriptionResponse_None, a, b);
  }
}

/**
 * PhoneNumber is a phone number for a user.
 *
 * @generated from message tenant.v1.PhoneNumber
 */
export class PhoneNumber extends Message<PhoneNumber> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string phone_number = 3;
   */
  phoneNumber = "";

  /**
   * @generated from field: bool verified = 4;
   */
  verified = false;

  constructor(data?: PartialMessage<PhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.PhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneNumber {
    return new PhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneNumber | PlainMessage<PhoneNumber> | undefined, b: PhoneNumber | PlainMessage<PhoneNumber> | undefined): boolean {
    return proto3.util.equals(PhoneNumber, a, b);
  }
}

/**
 * PhoneNumbersRequest lists the phone numbers for the authorized user.
 *
 * @generated from message tenant.v1.PhoneNumbersRequest
 */
export class PhoneNumbersRequest extends Message<PhoneNumbersRequest> {
  constructor(data?: PartialMessage<PhoneNumbersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.PhoneNumbersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneNumbersRequest {
    return new PhoneNumbersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneNumbersRequest {
    return new PhoneNumbersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneNumbersRequest {
    return new PhoneNumbersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneNumbersRequest | PlainMessage<PhoneNumbersRequest> | undefined, b: PhoneNumbersRequest | PlainMessage<PhoneNumbersRequest> | undefined): boolean {
    return proto3.util.equals(PhoneNumbersRequest, a, b);
  }
}

/**
 * PhoneNumbersResponse returns the phone numbers for the authorized user.
 *
 * @generated from message tenant.v1.PhoneNumbersResponse
 */
export class PhoneNumbersResponse extends Message<PhoneNumbersResponse> {
  /**
   * @generated from field: repeated tenant.v1.PhoneNumber phone_numbers = 1;
   */
  phoneNumbers: PhoneNumber[] = [];

  constructor(data?: PartialMessage<PhoneNumbersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.PhoneNumbersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_numbers", kind: "message", T: PhoneNumber, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneNumbersResponse {
    return new PhoneNumbersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneNumbersResponse {
    return new PhoneNumbersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneNumbersResponse {
    return new PhoneNumbersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneNumbersResponse | PlainMessage<PhoneNumbersResponse> | undefined, b: PhoneNumbersResponse | PlainMessage<PhoneNumbersResponse> | undefined): boolean {
    return proto3.util.equals(PhoneNumbersResponse, a, b);
  }
}

/**
 * VerifyPhoneNumberRequest verifies a phone number for the user.
 *
 * @generated from message tenant.v1.VerifyPhoneNumberRequest
 */
export class VerifyPhoneNumberRequest extends Message<VerifyPhoneNumberRequest> {
  /**
   * @generated from field: string phone_number = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<VerifyPhoneNumberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.VerifyPhoneNumberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyPhoneNumberRequest {
    return new VerifyPhoneNumberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyPhoneNumberRequest {
    return new VerifyPhoneNumberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyPhoneNumberRequest {
    return new VerifyPhoneNumberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyPhoneNumberRequest | PlainMessage<VerifyPhoneNumberRequest> | undefined, b: VerifyPhoneNumberRequest | PlainMessage<VerifyPhoneNumberRequest> | undefined): boolean {
    return proto3.util.equals(VerifyPhoneNumberRequest, a, b);
  }
}

/**
 * VerifyPhoneNumberResponse returns the verification code that was sent to the user.
 *
 * @generated from message tenant.v1.VerifyPhoneNumberResponse
 */
export class VerifyPhoneNumberResponse extends Message<VerifyPhoneNumberResponse> {
  /**
   * @generated from field: tenant.v1.PhoneNumber phone_number = 1;
   */
  phoneNumber?: PhoneNumber;

  /**
   * @generated from field: string verification_code = 2;
   */
  verificationCode = "";

  constructor(data?: PartialMessage<VerifyPhoneNumberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.VerifyPhoneNumberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "message", T: PhoneNumber },
    { no: 2, name: "verification_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyPhoneNumberResponse {
    return new VerifyPhoneNumberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyPhoneNumberResponse {
    return new VerifyPhoneNumberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyPhoneNumberResponse {
    return new VerifyPhoneNumberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyPhoneNumberResponse | PlainMessage<VerifyPhoneNumberResponse> | undefined, b: VerifyPhoneNumberResponse | PlainMessage<VerifyPhoneNumberResponse> | undefined): boolean {
    return proto3.util.equals(VerifyPhoneNumberResponse, a, b);
  }
}

/**
 * DeletePhoneNumberRequest deletes a phone number for the authorized user.
 *
 * @generated from message tenant.v1.DeletePhoneNumberRequest
 */
export class DeletePhoneNumberRequest extends Message<DeletePhoneNumberRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeletePhoneNumberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeletePhoneNumberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePhoneNumberRequest {
    return new DeletePhoneNumberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePhoneNumberRequest {
    return new DeletePhoneNumberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePhoneNumberRequest {
    return new DeletePhoneNumberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePhoneNumberRequest | PlainMessage<DeletePhoneNumberRequest> | undefined, b: DeletePhoneNumberRequest | PlainMessage<DeletePhoneNumberRequest> | undefined): boolean {
    return proto3.util.equals(DeletePhoneNumberRequest, a, b);
  }
}

/**
 * DeletePhoneNumberResponse acknowledges the deletion of a phone number.
 *
 * @generated from message tenant.v1.DeletePhoneNumberResponse
 */
export class DeletePhoneNumberResponse extends Message<DeletePhoneNumberResponse> {
  constructor(data?: PartialMessage<DeletePhoneNumberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tenant.v1.DeletePhoneNumberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePhoneNumberResponse {
    return new DeletePhoneNumberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePhoneNumberResponse {
    return new DeletePhoneNumberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePhoneNumberResponse {
    return new DeletePhoneNumberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePhoneNumberResponse | PlainMessage<DeletePhoneNumberResponse> | undefined, b: DeletePhoneNumberResponse | PlainMessage<DeletePhoneNumberResponse> | undefined): boolean {
    return proto3.util.equals(DeletePhoneNumberResponse, a, b);
  }
}

