// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file web/v1/key.proto (package web.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * @generated from message web.v1.APIKey
 */
export class APIKey extends Message<APIKey> {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp last_used = 2;
   */
  lastUsed?: Timestamp;

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  constructor(data?: PartialMessage<APIKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.APIKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: Timestamp },
    { no: 2, name: "last_used", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIKey {
    return new APIKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJsonString(jsonString, options);
  }

  static equals(a: APIKey | PlainMessage<APIKey> | undefined, b: APIKey | PlainMessage<APIKey> | undefined): boolean {
    return proto3.util.equals(APIKey, a, b);
  }
}

/**
 * @generated from message web.v1.CreateKeyRequest
 */
export class CreateKeyRequest extends Message<CreateKeyRequest> {
  constructor(data?: PartialMessage<CreateKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.CreateKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKeyRequest {
    return new CreateKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKeyRequest | PlainMessage<CreateKeyRequest> | undefined, b: CreateKeyRequest | PlainMessage<CreateKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateKeyRequest, a, b);
  }
}

/**
 * @generated from message web.v1.CreateKeyResponse
 */
export class CreateKeyResponse extends Message<CreateKeyResponse> {
  /**
   * @generated from field: web.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<CreateKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.CreateKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateKeyResponse {
    return new CreateKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateKeyResponse {
    return new CreateKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateKeyResponse {
    return new CreateKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateKeyResponse | PlainMessage<CreateKeyResponse> | undefined, b: CreateKeyResponse | PlainMessage<CreateKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateKeyResponse, a, b);
  }
}

/**
 * @generated from message web.v1.ListKeysRequest
 */
export class ListKeysRequest extends Message<ListKeysRequest> {
  constructor(data?: PartialMessage<ListKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.ListKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysRequest {
    return new ListKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined, b: ListKeysRequest | PlainMessage<ListKeysRequest> | undefined): boolean {
    return proto3.util.equals(ListKeysRequest, a, b);
  }
}

/**
 * @generated from message web.v1.ListKeysResponse
 */
export class ListKeysResponse extends Message<ListKeysResponse> {
  /**
   * @generated from field: repeated web.v1.APIKey keys = 1;
   */
  keys: APIKey[] = [];

  constructor(data?: PartialMessage<ListKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.ListKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeysResponse {
    return new ListKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined, b: ListKeysResponse | PlainMessage<ListKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListKeysResponse, a, b);
  }
}

/**
 * @generated from message web.v1.DeleteKeyRequest
 */
export class DeleteKeyRequest extends Message<DeleteKeyRequest> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  constructor(data?: PartialMessage<DeleteKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.DeleteKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKeyRequest {
    return new DeleteKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined, b: DeleteKeyRequest | PlainMessage<DeleteKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteKeyRequest, a, b);
  }
}

/**
 * @generated from message web.v1.DeleteKeyResponse
 */
export class DeleteKeyResponse extends Message<DeleteKeyResponse> {
  constructor(data?: PartialMessage<DeleteKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "web.v1.DeleteKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteKeyResponse {
    return new DeleteKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteKeyResponse {
    return new DeleteKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteKeyResponse {
    return new DeleteKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteKeyResponse | PlainMessage<DeleteKeyResponse> | undefined, b: DeleteKeyResponse | PlainMessage<DeleteKeyResponse> | undefined): boolean {
    return proto3.util.equals(DeleteKeyResponse, a, b);
  }
}

