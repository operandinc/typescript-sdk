// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file web/v1/user.proto (package web.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {BillingStatusRequest, BillingStatusResponse, ConfigureBillingRequest, ConfigureBillingResponse, FinalizeLoginRequest, FinalizeLoginResponse, GetProfileRequest, GetProfileResponse, LoginRequest, LoginResponse, ManageBillingRequest, ManageBillingResponse, UpdateProfileRequest, UpdateProfileResponse} from "./user_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * UserService provides the service for managing users, i.e. authentication, sessions,
 * profiles, as well as managing billing. Note: Requests will be authenticated if they
 * include an `Authorization` header, which includes the session token as the value.
 *
 * @generated from service web.v1.UserService
 */
export const UserService = {
  typeName: "web.v1.UserService",
  methods: {
    /**
     * Login initiates a login flow for the user. They are sent an email which they must
     * click to confirm their login. The user then calls `FinalizeLogin`, which allows them
     * to exchange the login token for a session token.
     *
     * @generated from rpc web.v1.UserService.Login
     */
    login: {
      name: "Login",
      I: LoginRequest,
      O: LoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * FinalizeLogin exchanges a login token for a session token.
     *
     * @generated from rpc web.v1.UserService.FinalizeLogin
     */
    finalizeLogin: {
      name: "FinalizeLogin",
      I: FinalizeLoginRequest,
      O: FinalizeLoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetProfile returns the profile of the user. This endpoint can also be used as a way
     * to check the validity of a session. If a handle is specified, this endpoint will return
     * the profile of another user.
     *
     * @generated from rpc web.v1.UserService.GetProfile
     */
    getProfile: {
      name: "GetProfile",
      I: GetProfileRequest,
      O: GetProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateProfile updates the profile of the user. For example, by allowing them to configure
     * their handle, and in the future, name, avatar, etc.
     *
     * @generated from rpc web.v1.UserService.UpdateProfile
     */
    updateProfile: {
      name: "UpdateProfile",
      I: UpdateProfileRequest,
      O: UpdateProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * BillingStatus returns the current billing status of the user.
     *
     * @generated from rpc web.v1.UserService.BillingStatus
     */
    billingStatus: {
      name: "BillingStatus",
      I: BillingStatusRequest,
      O: BillingStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ConfigureBilling allows the user to configure billing for the first time. If the user
     * has already configured billing successfully, then this will return an error. In this case,
     * the user should use the `ManageBilling` endpoint which will return a link to a billing page
     * to manage their billing and subscription settings.
     *
     * @generated from rpc web.v1.UserService.ConfigureBilling
     */
    configureBilling: {
      name: "ConfigureBilling",
      I: ConfigureBillingRequest,
      O: ConfigureBillingResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ManageBilling returns a link to a billing page to manage the user's billing and subscription
     * settings. This will error if the users billing isn't configured.
     *
     * @generated from rpc web.v1.UserService.ManageBilling
     */
    manageBilling: {
      name: "ManageBilling",
      I: ManageBillingRequest,
      O: ManageBillingResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

