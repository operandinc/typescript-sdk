// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/notification.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * PendingRequest is the request for the Pending method.
 *
 * @generated from message operand.v1.PendingRequest
 */
export class PendingRequest extends Message<PendingRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: optional string cursor = 2;
   */
  cursor?: string;

  constructor(data?: PartialMessage<PendingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.PendingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingRequest {
    return new PendingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingRequest {
    return new PendingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingRequest {
    return new PendingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PendingRequest | PlainMessage<PendingRequest> | undefined, b: PendingRequest | PlainMessage<PendingRequest> | undefined): boolean {
    return proto3.util.equals(PendingRequest, a, b);
  }
}

/**
 * NotificationAction contains an action that can be taken on a notification.
 *
 * @generated from message operand.v1.NotificationAction
 */
export class NotificationAction extends Message<NotificationAction> {
  /**
   * @generated from oneof operand.v1.NotificationAction.action
   */
  action: {
    /**
     * @generated from field: operand.v1.NotificationAction.None none = 1;
     */
    value: NotificationAction_None;
    case: "none";
  } | {
    /**
     * @generated from field: operand.v1.NotificationAction.RedirectTo redirect_to = 2;
     */
    value: NotificationAction_RedirectTo;
    case: "redirectTo";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NotificationAction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.NotificationAction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: NotificationAction_None, oneof: "action" },
    { no: 2, name: "redirect_to", kind: "message", T: NotificationAction_RedirectTo, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationAction {
    return new NotificationAction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationAction {
    return new NotificationAction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationAction {
    return new NotificationAction().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationAction | PlainMessage<NotificationAction> | undefined, b: NotificationAction | PlainMessage<NotificationAction> | undefined): boolean {
    return proto3.util.equals(NotificationAction, a, b);
  }
}

/**
 * @generated from message operand.v1.NotificationAction.None
 */
export class NotificationAction_None extends Message<NotificationAction_None> {
  constructor(data?: PartialMessage<NotificationAction_None>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.NotificationAction.None";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationAction_None {
    return new NotificationAction_None().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationAction_None {
    return new NotificationAction_None().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationAction_None {
    return new NotificationAction_None().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationAction_None | PlainMessage<NotificationAction_None> | undefined, b: NotificationAction_None | PlainMessage<NotificationAction_None> | undefined): boolean {
    return proto3.util.equals(NotificationAction_None, a, b);
  }
}

/**
 * @generated from message operand.v1.NotificationAction.RedirectTo
 */
export class NotificationAction_RedirectTo extends Message<NotificationAction_RedirectTo> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<NotificationAction_RedirectTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.NotificationAction.RedirectTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationAction_RedirectTo {
    return new NotificationAction_RedirectTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationAction_RedirectTo {
    return new NotificationAction_RedirectTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationAction_RedirectTo {
    return new NotificationAction_RedirectTo().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationAction_RedirectTo | PlainMessage<NotificationAction_RedirectTo> | undefined, b: NotificationAction_RedirectTo | PlainMessage<NotificationAction_RedirectTo> | undefined): boolean {
    return proto3.util.equals(NotificationAction_RedirectTo, a, b);
  }
}

/**
 * Notification is a notification sent to a user.
 *
 * @generated from message operand.v1.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  /**
   * @generated from field: operand.v1.NotificationAction action = 5;
   */
  action?: NotificationAction;

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "message", T: Timestamp },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "action", kind: "message", T: NotificationAction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

/**
 * PendingResponse is the response for the Pending method.
 *
 * @generated from message operand.v1.PendingResponse
 */
export class PendingResponse extends Message<PendingResponse> {
  /**
   * @generated from field: repeated operand.v1.Notification notifications = 1;
   */
  notifications: Notification[] = [];

  /**
   * @generated from field: optional string next_cursor = 2;
   */
  nextCursor?: string;

  constructor(data?: PartialMessage<PendingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.PendingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
    { no: 2, name: "next_cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PendingResponse {
    return new PendingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PendingResponse {
    return new PendingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PendingResponse {
    return new PendingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PendingResponse | PlainMessage<PendingResponse> | undefined, b: PendingResponse | PlainMessage<PendingResponse> | undefined): boolean {
    return proto3.util.equals(PendingResponse, a, b);
  }
}

/**
 * AcknowledgeRequest is the request for the Acknowledge method.
 *
 * @generated from message operand.v1.AcknowledgeRequest
 */
export class AcknowledgeRequest extends Message<AcknowledgeRequest> {
  /**
   * @generated from field: repeated string ids = 1;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<AcknowledgeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.AcknowledgeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcknowledgeRequest {
    return new AcknowledgeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AcknowledgeRequest | PlainMessage<AcknowledgeRequest> | undefined, b: AcknowledgeRequest | PlainMessage<AcknowledgeRequest> | undefined): boolean {
    return proto3.util.equals(AcknowledgeRequest, a, b);
  }
}

/**
 * AcknowledgeResponse is the response for the Acknowledge method.
 *
 * @generated from message operand.v1.AcknowledgeResponse
 */
export class AcknowledgeResponse extends Message<AcknowledgeResponse> {
  constructor(data?: PartialMessage<AcknowledgeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.AcknowledgeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcknowledgeResponse {
    return new AcknowledgeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcknowledgeResponse {
    return new AcknowledgeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcknowledgeResponse {
    return new AcknowledgeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AcknowledgeResponse | PlainMessage<AcknowledgeResponse> | undefined, b: AcknowledgeResponse | PlainMessage<AcknowledgeResponse> | undefined): boolean {
    return proto3.util.equals(AcknowledgeResponse, a, b);
  }
}

/**
 * NotificationSettings contains the notification settings for a user.
 *
 * @generated from message operand.v1.NotificationSettings
 */
export class NotificationSettings extends Message<NotificationSettings> {
  /**
   * @generated from field: bool disable_emails = 1;
   */
  disableEmails = false;

  constructor(data?: PartialMessage<NotificationSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.NotificationSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "disable_emails", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationSettings {
    return new NotificationSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationSettings {
    return new NotificationSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationSettings {
    return new NotificationSettings().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationSettings | PlainMessage<NotificationSettings> | undefined, b: NotificationSettings | PlainMessage<NotificationSettings> | undefined): boolean {
    return proto3.util.equals(NotificationSettings, a, b);
  }
}

/**
 * SettingsRequest is the request for the Settings method.
 *
 * @generated from message operand.v1.SettingsRequest
 */
export class SettingsRequest extends Message<SettingsRequest> {
  constructor(data?: PartialMessage<SettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SettingsRequest {
    return new SettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SettingsRequest {
    return new SettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SettingsRequest {
    return new SettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SettingsRequest | PlainMessage<SettingsRequest> | undefined, b: SettingsRequest | PlainMessage<SettingsRequest> | undefined): boolean {
    return proto3.util.equals(SettingsRequest, a, b);
  }
}

/**
 * SettingsResponse is the response for the Settings method.
 *
 * @generated from message operand.v1.SettingsResponse
 */
export class SettingsResponse extends Message<SettingsResponse> {
  /**
   * @generated from field: operand.v1.NotificationSettings settings = 1;
   */
  settings?: NotificationSettings;

  constructor(data?: PartialMessage<SettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SettingsResponse {
    return new SettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SettingsResponse {
    return new SettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SettingsResponse {
    return new SettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SettingsResponse | PlainMessage<SettingsResponse> | undefined, b: SettingsResponse | PlainMessage<SettingsResponse> | undefined): boolean {
    return proto3.util.equals(SettingsResponse, a, b);
  }
}

/**
 * UpdateSettingsRequest is the request for the UpdateSettings method.
 *
 * @generated from message operand.v1.UpdateSettingsRequest
 */
export class UpdateSettingsRequest extends Message<UpdateSettingsRequest> {
  /**
   * @generated from field: operand.v1.NotificationSettings settings = 1;
   */
  settings?: NotificationSettings;

  constructor(data?: PartialMessage<UpdateSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UpdateSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingsRequest {
    return new UpdateSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingsRequest | PlainMessage<UpdateSettingsRequest> | undefined, b: UpdateSettingsRequest | PlainMessage<UpdateSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateSettingsRequest, a, b);
  }
}

/**
 * UpdateSettingsResponse is the response for the UpdateSettings method.
 *
 * @generated from message operand.v1.UpdateSettingsResponse
 */
export class UpdateSettingsResponse extends Message<UpdateSettingsResponse> {
  /**
   * @generated from field: operand.v1.NotificationSettings settings = 1;
   */
  settings?: NotificationSettings;

  constructor(data?: PartialMessage<UpdateSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UpdateSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "settings", kind: "message", T: NotificationSettings },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSettingsResponse {
    return new UpdateSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined, b: UpdateSettingsResponse | PlainMessage<UpdateSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateSettingsResponse, a, b);
  }
}

