// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file operand/v1/object.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CountRequest, CountResponse, DeleteRequest, DeleteResponse, GetRequest, GetResponse, ListRequest, ListResponse, SearchRequest, SearchResponse, SearchWithinRequest, SearchWithinResponse, SuggestionsRequest, SuggestionsResponse, UpsertRequest, UpsertResponse} from "./object_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * ObjectService is the user-facing API for doing operations on objects themselves, within an index.
 * To use this service, must pass `Operand-Index-ID` as a header, which specifies the index to use.
 * The API key, passed by the `Authorization`, must have appropriate permissions to access the index.
 *
 * @generated from service operand.v1.ObjectService
 */
export const ObjectService = {
  typeName: "operand.v1.ObjectService",
  methods: {
    /**
     * Upsert inserts or updates an object within the index.
     *
     * @generated from rpc operand.v1.ObjectService.Upsert
     */
    upsert: {
      name: "Upsert",
      I: UpsertRequest,
      O: UpsertResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Suggestions returns a list of suggested objects that the user may choose to index
     * based on the given query. For example, if the user is trying to index a podcast,
     * and they pass in the name, we return a list of podcasts that we could index for them
     * based on the name. This typically searches external resources, i.e. APIs.
     *
     * @generated from rpc operand.v1.ObjectService.Suggestions
     */
    suggestions: {
      name: "Suggestions",
      I: SuggestionsRequest,
      O: SuggestionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * List lists objects within the index.
     *
     * @generated from rpc operand.v1.ObjectService.List
     */
    list: {
      name: "List",
      I: ListRequest,
      O: ListResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get gets one or more objects from the index by their ID.
     *
     * @generated from rpc operand.v1.ObjectService.Get
     */
    get: {
      name: "Get",
      I: GetRequest,
      O: GetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete deletes one or more objects from the index by their ID.
     *
     * @generated from rpc operand.v1.ObjectService.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteRequest,
      O: DeleteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Count counts the objects in the index.
     *
     * @generated from rpc operand.v1.ObjectService.Count
     */
    count: {
      name: "Count",
      I: CountRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Search searches for objects within the index. Returns a set of objects that best match the
     * query, along with some snippets of content within the object that is relevant to the query.
     *
     * @generated from rpc operand.v1.ObjectService.Search
     */
    search: {
      name: "Search",
      I: SearchRequest,
      O: SearchResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SearchWithin searches for content within objects themselves, returning small snippets of
     * relevant content to the search query, along with the relevant objects themselves.
     *
     * @generated from rpc operand.v1.ObjectService.SearchWithin
     */
    searchWithin: {
      name: "SearchWithin",
      I: SearchWithinRequest,
      O: SearchWithinResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

