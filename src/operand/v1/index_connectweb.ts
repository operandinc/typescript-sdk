// @generated by protoc-gen-connect-web v0.2.1 with parameter "target=ts"
// @generated from file operand/v1/index.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CreateIndexRequest, CreateIndexResponse, DeleteIndexRequest, DeleteIndexResponse, GetIndexRequest, GetIndexResponse, ListIndexesRequest, ListIndexesResponse, SubscribeRequest, SubscribeResponse, SubscribersOfRequest, SubscribersOfResponse, SubscriptionsRequest, SubscriptionsResponse, UnsubscribeRequest, UnsubscribeResponse, UpdateIndexRequest, UpdateIndexResponse} from "./index_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * IndexService manages the users set of configured indexes. This includes
 * both the indexes they've personally created, as well as the indexes they've
 * subscribed to (i.e. public indexes).
 *
 * @generated from service operand.v1.IndexService
 */
export const IndexService = {
  typeName: "operand.v1.IndexService",
  methods: {
    /**
     * Allows the user to create a new index that they own.
     *
     * @generated from rpc operand.v1.IndexService.CreateIndex
     */
    createIndex: {
      name: "CreateIndex",
      I: CreateIndexRequest,
      O: CreateIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListIndexes returns a list of indexes that this or another user owns.
     *
     * @generated from rpc operand.v1.IndexService.ListIndexes
     */
    listIndexes: {
      name: "ListIndexes",
      I: ListIndexesRequest,
      O: ListIndexesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetIndex returns the details of a single index. The response also includes
     * additional information about the index, i.e. usage information, social data,
     * if requested by the caller.
     *
     * @generated from rpc operand.v1.IndexService.GetIndex
     */
    getIndex: {
      name: "GetIndex",
      I: GetIndexRequest,
      O: GetIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateIndex allows the user to update the details of an index. For now,
     * this operation is very limited, and only allows the user to toggle a few
     * smaller metadata-like settings on the index.
     *
     * @generated from rpc operand.v1.IndexService.UpdateIndex
     */
    updateIndex: {
      name: "UpdateIndex",
      I: UpdateIndexRequest,
      O: UpdateIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteIndex allows the user to delete an index. This operation will complete
     * instantly, but it will take a few minutes for the index to be fully deleted.
     * Another note is that any subscribers to this index will be notified that the
     * index has been deleted, and will therefore be unable to use it any more.
     *
     * @generated from rpc operand.v1.IndexService.DeleteIndex
     */
    deleteIndex: {
      name: "DeleteIndex",
      I: DeleteIndexRequest,
      O: DeleteIndexResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Subscriptions returns the list of indexes that this, or another user has subscribed to.
     *
     * @generated from rpc operand.v1.IndexService.Subscriptions
     */
    subscriptions: {
      name: "Subscriptions",
      I: SubscriptionsRequest,
      O: SubscriptionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Subscribe allows the user to subscribe to a public index.
     *
     * @generated from rpc operand.v1.IndexService.Subscribe
     */
    subscribe: {
      name: "Subscribe",
      I: SubscribeRequest,
      O: SubscribeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Unsubscribe allows the user to unsubscribe from a public index.
     *
     * @generated from rpc operand.v1.IndexService.Unsubscribe
     */
    unsubscribe: {
      name: "Unsubscribe",
      I: UnsubscribeRequest,
      O: UnsubscribeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * SubscribersOf returns the list of users that have subscribed to an index.
     *
     * @generated from rpc operand.v1.IndexService.SubscribersOf
     */
    subscribersOf: {
      name: "SubscribersOf",
      I: SubscribersOfRequest,
      O: SubscribersOfResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

