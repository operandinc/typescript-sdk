// @generated by protoc-gen-es v0.1.1 with parameter "target=ts+js"
// @generated from file operand/v1/index.proto (package operand.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";
import {UserProfile} from "../../web/v1/user_pb.js";

/**
 * @generated from message operand.v1.IndexOptions
 */
export class IndexOptions extends Message<IndexOptions> {
  /**
   * @generated from field: optional bool include_owner = 1;
   */
  includeOwner?: boolean;

  /**
   * @generated from field: optional bool include_subscription = 2;
   */
  includeSubscription?: boolean;

  /**
   * @generated from field: optional bool include_stats = 3;
   */
  includeStats?: boolean;

  constructor(data?: PartialMessage<IndexOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.IndexOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_owner", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "include_subscription", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "include_stats", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexOptions {
    return new IndexOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexOptions {
    return new IndexOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexOptions {
    return new IndexOptions().fromJsonString(jsonString, options);
  }

  static equals(a: IndexOptions | PlainMessage<IndexOptions> | undefined, b: IndexOptions | PlainMessage<IndexOptions> | undefined): boolean {
    return proto3.util.equals(IndexOptions, a, b);
  }
}

/**
 * @generated from message operand.v1.CreateIndexRequest
 */
export class CreateIndexRequest extends Message<CreateIndexRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool public = 3;
   */
  public = false;

  /**
   * @generated from field: optional operand.v1.IndexOptions options = 4;
   */
  options?: IndexOptions;

  constructor(data?: PartialMessage<CreateIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.CreateIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "options", kind: "message", T: IndexOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIndexRequest {
    return new CreateIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIndexRequest | PlainMessage<CreateIndexRequest> | undefined, b: CreateIndexRequest | PlainMessage<CreateIndexRequest> | undefined): boolean {
    return proto3.util.equals(CreateIndexRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * @generated from field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: bool notifications = 2;
   */
  notifications = false;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_at", kind: "message", T: Timestamp },
    { no: 2, name: "notifications", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

/**
 * @generated from message operand.v1.IndexStats
 */
export class IndexStats extends Message<IndexStats> {
  /**
   * @generated from field: int32 subscribers = 1;
   */
  subscribers = 0;

  constructor(data?: PartialMessage<IndexStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.IndexStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribers", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexStats {
    return new IndexStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexStats {
    return new IndexStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexStats {
    return new IndexStats().fromJsonString(jsonString, options);
  }

  static equals(a: IndexStats | PlainMessage<IndexStats> | undefined, b: IndexStats | PlainMessage<IndexStats> | undefined): boolean {
    return proto3.util.equals(IndexStats, a, b);
  }
}

/**
 * @generated from message operand.v1.Index
 */
export class Index extends Message<Index> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  /**
   * @generated from field: optional web.v1.UserProfile owner = 2;
   */
  owner?: UserProfile;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: bool public = 4;
   */
  public = false;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from field: optional operand.v1.Subscription subscription = 7;
   */
  subscription?: Subscription;

  /**
   * @generated from field: optional operand.v1.IndexStats stats = 8;
   */
  stats?: IndexStats;

  constructor(data?: PartialMessage<Index>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.Index";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "message", T: UserProfile, opt: true },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "subscription", kind: "message", T: Subscription, opt: true },
    { no: 8, name: "stats", kind: "message", T: IndexStats, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Index {
    return new Index().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Index {
    return new Index().fromJsonString(jsonString, options);
  }

  static equals(a: Index | PlainMessage<Index> | undefined, b: Index | PlainMessage<Index> | undefined): boolean {
    return proto3.util.equals(Index, a, b);
  }
}

/**
 * @generated from message operand.v1.CreateIndexResponse
 */
export class CreateIndexResponse extends Message<CreateIndexResponse> {
  /**
   * @generated from field: operand.v1.Index index = 1;
   */
  index?: Index;

  constructor(data?: PartialMessage<CreateIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.CreateIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateIndexResponse {
    return new CreateIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateIndexResponse {
    return new CreateIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateIndexResponse {
    return new CreateIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateIndexResponse | PlainMessage<CreateIndexResponse> | undefined, b: CreateIndexResponse | PlainMessage<CreateIndexResponse> | undefined): boolean {
    return proto3.util.equals(CreateIndexResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.ListIndexesRequest
 */
export class ListIndexesRequest extends Message<ListIndexesRequest> {
  /**
   * @generated from field: optional string owned_by_user = 1;
   */
  ownedByUser?: string;

  /**
   * @generated from field: optional operand.v1.IndexOptions options = 2;
   */
  options?: IndexOptions;

  constructor(data?: PartialMessage<ListIndexesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.ListIndexesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owned_by_user", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIndexesRequest {
    return new ListIndexesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIndexesRequest | PlainMessage<ListIndexesRequest> | undefined, b: ListIndexesRequest | PlainMessage<ListIndexesRequest> | undefined): boolean {
    return proto3.util.equals(ListIndexesRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.ListIndexesResponse
 */
export class ListIndexesResponse extends Message<ListIndexesResponse> {
  /**
   * @generated from field: repeated operand.v1.Index indexes = 1;
   */
  indexes: Index[] = [];

  constructor(data?: PartialMessage<ListIndexesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.ListIndexesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: Index, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIndexesResponse {
    return new ListIndexesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIndexesResponse | PlainMessage<ListIndexesResponse> | undefined, b: ListIndexesResponse | PlainMessage<ListIndexesResponse> | undefined): boolean {
    return proto3.util.equals(ListIndexesResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.GetIndexRequest
 */
export class GetIndexRequest extends Message<GetIndexRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  /**
   * @generated from field: optional operand.v1.IndexOptions options = 2;
   */
  options?: IndexOptions;

  constructor(data?: PartialMessage<GetIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.GetIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndexRequest {
    return new GetIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndexRequest | PlainMessage<GetIndexRequest> | undefined, b: GetIndexRequest | PlainMessage<GetIndexRequest> | undefined): boolean {
    return proto3.util.equals(GetIndexRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.GetIndexResponse
 */
export class GetIndexResponse extends Message<GetIndexResponse> {
  /**
   * @generated from field: operand.v1.Index index = 1;
   */
  index?: Index;

  constructor(data?: PartialMessage<GetIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.GetIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIndexResponse {
    return new GetIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIndexResponse {
    return new GetIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIndexResponse {
    return new GetIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIndexResponse | PlainMessage<GetIndexResponse> | undefined, b: GetIndexResponse | PlainMessage<GetIndexResponse> | undefined): boolean {
    return proto3.util.equals(GetIndexResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.UpdateIndexRequest
 */
export class UpdateIndexRequest extends Message<UpdateIndexRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional bool public = 4;
   */
  public?: boolean;

  /**
   * @generated from field: optional operand.v1.IndexOptions options = 5;
   */
  options?: IndexOptions;

  constructor(data?: PartialMessage<UpdateIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UpdateIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: "options", kind: "message", T: IndexOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIndexRequest {
    return new UpdateIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIndexRequest {
    return new UpdateIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIndexRequest {
    return new UpdateIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIndexRequest | PlainMessage<UpdateIndexRequest> | undefined, b: UpdateIndexRequest | PlainMessage<UpdateIndexRequest> | undefined): boolean {
    return proto3.util.equals(UpdateIndexRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.UpdateIndexResponse
 */
export class UpdateIndexResponse extends Message<UpdateIndexResponse> {
  /**
   * @generated from field: operand.v1.Index index = 1;
   */
  index?: Index;

  constructor(data?: PartialMessage<UpdateIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UpdateIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "message", T: Index },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateIndexResponse {
    return new UpdateIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateIndexResponse {
    return new UpdateIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateIndexResponse {
    return new UpdateIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateIndexResponse | PlainMessage<UpdateIndexResponse> | undefined, b: UpdateIndexResponse | PlainMessage<UpdateIndexResponse> | undefined): boolean {
    return proto3.util.equals(UpdateIndexResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.DeleteIndexRequest
 */
export class DeleteIndexRequest extends Message<DeleteIndexRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  constructor(data?: PartialMessage<DeleteIndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.DeleteIndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIndexRequest {
    return new DeleteIndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIndexRequest | PlainMessage<DeleteIndexRequest> | undefined, b: DeleteIndexRequest | PlainMessage<DeleteIndexRequest> | undefined): boolean {
    return proto3.util.equals(DeleteIndexRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.DeleteIndexResponse
 */
export class DeleteIndexResponse extends Message<DeleteIndexResponse> {
  constructor(data?: PartialMessage<DeleteIndexResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.DeleteIndexResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteIndexResponse {
    return new DeleteIndexResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteIndexResponse {
    return new DeleteIndexResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteIndexResponse {
    return new DeleteIndexResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteIndexResponse | PlainMessage<DeleteIndexResponse> | undefined, b: DeleteIndexResponse | PlainMessage<DeleteIndexResponse> | undefined): boolean {
    return proto3.util.equals(DeleteIndexResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscriptionsRequest
 */
export class SubscriptionsRequest extends Message<SubscriptionsRequest> {
  /**
   * @generated from field: optional string user_id = 1;
   */
  userId?: string;

  /**
   * @generated from field: optional operand.v1.IndexOptions options = 2;
   */
  options?: IndexOptions;

  constructor(data?: PartialMessage<SubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "options", kind: "message", T: IndexOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionsRequest {
    return new SubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionsRequest {
    return new SubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionsRequest {
    return new SubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionsRequest | PlainMessage<SubscriptionsRequest> | undefined, b: SubscriptionsRequest | PlainMessage<SubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(SubscriptionsRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscriptionsResponse
 */
export class SubscriptionsResponse extends Message<SubscriptionsResponse> {
  /**
   * @generated from field: repeated operand.v1.Index indexes = 1;
   */
  indexes: Index[] = [];

  constructor(data?: PartialMessage<SubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "indexes", kind: "message", T: Index, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionsResponse {
    return new SubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionsResponse {
    return new SubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionsResponse {
    return new SubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionsResponse | PlainMessage<SubscriptionsResponse> | undefined, b: SubscriptionsResponse | PlainMessage<SubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(SubscriptionsResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscribeRequest
 */
export class SubscribeRequest extends Message<SubscribeRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  /**
   * @generated from field: optional bool notifications = 2;
   */
  notifications?: boolean;

  constructor(data?: PartialMessage<SubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notifications", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequest {
    return new SubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined, b: SubscribeRequest | PlainMessage<SubscribeRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscribeResponse
 */
export class SubscribeResponse extends Message<SubscribeResponse> {
  /**
   * @generated from field: operand.v1.Subscription subscription = 1;
   */
  subscription?: Subscription;

  constructor(data?: PartialMessage<SubscribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: Subscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined, b: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.UnsubscribeRequest
 */
export class UnsubscribeRequest extends Message<UnsubscribeRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  constructor(data?: PartialMessage<UnsubscribeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UnsubscribeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeRequest {
    return new UnsubscribeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeRequest | PlainMessage<UnsubscribeRequest> | undefined, b: UnsubscribeRequest | PlainMessage<UnsubscribeRequest> | undefined): boolean {
    return proto3.util.equals(UnsubscribeRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.UnsubscribeResponse
 */
export class UnsubscribeResponse extends Message<UnsubscribeResponse> {
  constructor(data?: PartialMessage<UnsubscribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.UnsubscribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsubscribeResponse {
    return new UnsubscribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsubscribeResponse {
    return new UnsubscribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsubscribeResponse {
    return new UnsubscribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnsubscribeResponse | PlainMessage<UnsubscribeResponse> | undefined, b: UnsubscribeResponse | PlainMessage<UnsubscribeResponse> | undefined): boolean {
    return proto3.util.equals(UnsubscribeResponse, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscribersOfRequest
 */
export class SubscribersOfRequest extends Message<SubscribersOfRequest> {
  /**
   * @generated from field: string public_id = 1;
   */
  publicId = "";

  constructor(data?: PartialMessage<SubscribersOfRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscribersOfRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribersOfRequest {
    return new SubscribersOfRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribersOfRequest {
    return new SubscribersOfRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribersOfRequest {
    return new SubscribersOfRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribersOfRequest | PlainMessage<SubscribersOfRequest> | undefined, b: SubscribersOfRequest | PlainMessage<SubscribersOfRequest> | undefined): boolean {
    return proto3.util.equals(SubscribersOfRequest, a, b);
  }
}

/**
 * @generated from message operand.v1.SubscribersOfResponse
 */
export class SubscribersOfResponse extends Message<SubscribersOfResponse> {
  /**
   * @generated from field: repeated web.v1.UserProfile subscribers = 1;
   */
  subscribers: UserProfile[] = [];

  constructor(data?: PartialMessage<SubscribersOfResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "operand.v1.SubscribersOfResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribers", kind: "message", T: UserProfile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribersOfResponse {
    return new SubscribersOfResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribersOfResponse {
    return new SubscribersOfResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribersOfResponse {
    return new SubscribersOfResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribersOfResponse | PlainMessage<SubscribersOfResponse> | undefined, b: SubscribersOfResponse | PlainMessage<SubscribersOfResponse> | undefined): boolean {
    return proto3.util.equals(SubscribersOfResponse, a, b);
  }
}

